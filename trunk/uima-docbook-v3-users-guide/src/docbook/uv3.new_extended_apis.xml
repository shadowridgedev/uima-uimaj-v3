<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"[
<!ENTITY imgroot "images/version_3_users_guide/new_extended_apis/">
<!ENTITY % uimaents SYSTEM "../../target/docbook-shared/entities.ent">  
%uimaents;
]>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<chapter id="uv3.new_extended_apis">
  <title>New and Extended APIs</title>
  <titleabbrev>New/Extended APIs</titleabbrev>
      
  <section id="uv3.new_extended_apis.index_and_iterator_improvements">
    <title>UIMA FSIndex and FSIterators improvements</title>
    
    <para>The FSIndex interface implements Collection, so you can now write <code>for (MyType item : myIndex)</code> to
       iterate over an index.</para>
       
    <para>Because it implements Collection, the FSIndex interface includes a <code>stream()</code> method, so you can now write <code>myIndex.stream().any-stream-operations</code>,
      which will use the items in the index as the source of the stream.</para>
         
    <para>The FSIterator interface now implements the Java ListIterator Interface, and supports the methods there
      except for add, nextIndex, previousIndex, and set; the remove() method's meaning is changed to remove the item
      from all of the UIMA indexes.
    </para>
    
    <para>The iterators over indexes no longer throw concurrent modification exceptions if the index is modified
    while it is being iterated over.  Instead, the iterators use a lazily-created copy-on-write approach that, when
    some portion of the index is updated, prior to the update, copies the original state of that portion, and continues
    to iterate over that.  While this is helpful if you are explicitly modifying the indexes in a loop, it 
    can be especially helpful when modifying Feature Structures as you iterate, because
    the UIMA support for detecting and avoiding possible index corruption if you modify some feature being used by 
    some index as a key, is automatically (under the covers) temporarily removing the Feature Structure from indexes, 
    doing the modification, and then adding it back.
    </para>
    
    <para>Similarly to version 2, iterator methods <code>moveToFirst, moveToLast, and moveTo(a_positioning_Feature_Structure)</code>
      "reset" the iterator to be able to "see" the current state of the indexes.  This corresponds to resetting the
      concurrent modification detection sensing in version 2, when these methods are used.
    </para>
    
    <para>Note that the phrase <emphasis>Concurrent Modification</emphasis> is being used here in a single threading
      to the indexes.  UIMA does not support multi-threaded write access to the CAS; it does support multi-threaded
      read access to a set of CAS Views, concurrent with one thread having write access (to different views).
    </para>
    
    <para>The <code>remove()</code> API for iterators is now implemented for FSIterators.  Its meaning is slightly
    different from the normal Java meaning - it doesn't remove the item from the collection being iterated over; rather
    it removes the Feature Structure returned by <code>get()</code> from all indexes in the view.
    </para>
    
    <para>The FSIterator methods that normally check for iterator validity have versions which skip that check.  This
    may be a performance optimization in cases where you can guarantee the iterator is valid, for example if
    you have a loop which is checking <code>hasNext()</code> and following it with a <code>next()</code>, 
    which is only executed if the
    <code>hasNext()</code> was true.  The non-checking versions are suffixed with Nvc (stands for No Validity Check).</para>
    
    <para>The FSIndex API has a new method, <code>subType(type-spec)</code>, which returns an FSIndex for the same
      index, but specialized to elements which are a subtype of the original index.  The type-spec can be either a 
      JCas class, e.g. <code>MyToken.class</code>, or a UIMA type instance.</para>
  </section>

  <section id="uv3.new_extended_apis.select">
    <title>New Select API</title>
    
    <para>A versatile new Select framework for accessing and acting on Feature Structures 
    selected from the CAS or from Indexes or from other collection objects is documented in
    a separate chapter.  This API is integrated with Java 8's Stream facility.
    </para>
  </section>
  
  <section id="uv3.new_extended_apis.custom_java_objects">
    <title>New custom Java objects in the CAS framework</title>
    
    <para>There is a new framework that supports allowing you to add your own custom Java objects as
      objects transportable in the CAS.  A following chapter describes this facility, and some new
      semi-built-in types that make use of it.  
    </para>
  </section>  
  
  <section id="uv3.new_extended_apis.lists_and_arrays">
    <title>Built-in lists and arrays</title>
    
    <para>The built-in FSArray JCas class is now parameterized with the type of its
      elements.</para>
    
    <para>UIMA Array and List types implement Iterable, so you can use them
      like this: <code>for (MyType item : myArray) ...</code>.</para>
      
    <para>UIMA Arrays and Lists support <code>contains(element)</code> and <code>isEmpty()</code>.</para>

    <para>UIMA Array and List types support a <code>stream()</code> method
    returning a Stream or a type-specialized sub interface of Stream for primitives 
    (IntStream, LongStream, DoubleStream) 
    over the objects in the collection.  Omitted are stream types where boxing would
    occur - Arrays of Byte, Short, Float, Boolean.</para>

    <para>The <code>iterator()</code> methods for <code>IntegerList
      IntegerArrayList, IntegerArray, 
      DoubleArray,</code> and <code>LongArray</code> return
      an <code>OfInt / OfDouble / OfLong</code> instances.  These are subtypes of 
      <code>Iterator</code> with an additional methods nextInt / nextLong / nextDouble which avoid the
      boxing of the normal iterator.
    </para>
       
    <para>The new <code>select</code> framework supports stream operations; see the "select" chapter for details.
    </para> 
    
    <para>
      A new set of methods on UIMA built-in lists, <code>createNonEmptyNode() and emptyList()</code>, 
      creates a non-empty node of the type, or retrieves a (shared) empty node of the type.  
      These methods are not static, and create or get the instance in the same CAS as the object instance.
      These methods are callable on both the empty and non-empty node instances, or on their shared
      super interface, for example, on NonEmptyFloatList, EmptyFloatList, and FloatList (the common super interface).
    </para>
    
    <para>
      A new set of static methods on UIMA built-in lists and arrays, <code>create(jcas, array_source)</code>
      take a Java array of items, and creates
      a corresponding UIMA built-in list or array populated with items from the array_source.
    </para>
    
    <para>For UIMA Lists and Arrays, the CAS and JCas has emptyXXXList/Array methods, which return
      a shared instance of the immutable empty object.
      The Cas and JCas have generic emptyArray/List, taking an argument JCas class identifying the type, 
      e.g.  FloatArray.class, StringList.class, etc.
    </para>
        
    <para>For lists, there are some new common APIs for all list kinds.
      <itemizedlist>
        <listitem>
          <para>
            <code>push(item)</code> pushes the item onto an existing list node, creates a new
            non-empty node, setting its head to <code>item</code> and its tail to the existing list node.
            This allows easy construction of a list in backwards order.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>pushNode()</code> creates and links in a new node in front of this node.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>insertNode()</code> creates and links in a new node following this node.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>createNonEmptyNode()</code> creates a node of the 
                 same type, in the same CAS, without linking it.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>getCommonTail()</code> gets the tail of the node
          </para>
        </listitem>
        <listitem>
          <para>
            <code>setTail()</code> sets the tail of the node
          </para>
        </listitem>
        <listitem>
          <para>
            <code>walkList()</code> walks the list applying a consumer to each item
          </para>
        </listitem>
        <listitem>
          <para>
            <code>getLength()</code> walks the list to compute its length
          </para>
        </listitem>
        <listitem>
          <para>
            <code>emptyList</code> returns a shared instance of the empty list of the same type, in the same CAS
          </para>
        </listitem>
      </itemizedlist>
      
    </para>
      
    <section id="uv3.new_extended_apis.reorganized.lists_and_arrays">
      <title>Built-in lists and arrays have common super classes / interfaces</title>
        <para>Some methods common to multiple implements were moved to the super classes,
          some classes were made abstract (to prevent them from being instantiated, which would be an error).
          For arrays, a new method common to all arrays, <code>copyValuesFrom()</code> copies values from arrays of the same type.
        </para>        
    </section> 
    
  </section>    
  
  <section id="uv3.new_extended_apis.collections">
    <title>Many UIMA objects implement Stream or Collection</title>
      <para>In Java 8, classes which implement Collection can be converted to streams using the <code>xxx.sream()</code>
        method.  To better integrate with Java 8, the following UIMA classes and interfaces now implement Stream or Collection:
        <itemizedlist>
          <listitem><para>FSIndex (implements Collection)</para></listitem>
          <listitem><para>all of the built-in Arrays, e.g. FloatArray implement Stream, the Integer/long/double arrays implement the non-boxing version</para></listitem>
          <listitem><para>all of the built-in Lists implement Stream, the IntegerList implements the non boxing version</para></listitem>
        </itemizedlist>
      </para>
  </section> 
 
  <!--  
  <section id="uv3.new_extended_apis.annotation">
    <title>Annotation comparator methods</title>
    
    <para>The built-in type Annotation has 4 new methods to allow comparing two annotations.
      The first method (<code>compareAnnotation</code>) uses
      the standard annotation comparator (two keys: begin (ascending) and end (descending)); types can be different. 
      A second method (<code>compareAnnotation(other, linear_type_order)</code>) adds a 3rd comparison,
      used if the Annotations compare equal), which uses a linear_type_order to compare the two types.
      Another two methods extend these two methods with an additional key - the Annotation's ID,
      used only if the previous comparisons are all equal.
      All of these return the standard Java compare result allowing discrimination between equal, &gt;, and &lt;.
      
      <variablelist>
        <varlistentry>
          <term>Here's a summary, by compare arguments:</term>
          <listitem>
            <variablelist>
              <varlistentry>
                <term>begin, end</term>
                <listitem><para>compares using just the begin and end values, the types can be arbitrary</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>begin, end, type-order</term>
                <listitem><para>adds ordering of the types based on the global linear type order</para></listitem>
              </varlistentry>
              
              <varlistentry>
                <term>begin, end, fs.id()</term>
                <listitem><para>like the first, but adds a compare of the ids if all else equal</para></listitem>
              </varlistentry>
              <varlistentry>
                <term>begin, end, type-order, fs.id()</term>
                <listitem><para>like the second, but adds a compare of the ids if all else equal</para></listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
      
        
      </para>
  </section>
 -->
 
  <section id="uv3.new_extended_apis.reorganized">
    <title>Reorganized APIs</title>
    
    <para>Some APIs were reorganized.  Some of the reorganizations include altering the super class
      and implements hierarchies, making some classes abstract, making use of Java 8's new
      <code>default</code> mechanisms to supply default implementations in interfaces, 
      and moving methods to more common places.  Users of the non-internal UIMA APIs
      should not be affected by these reorganizations.
    </para>

    <para>As an example, version 2 had two different Java objects representing particular Feature Structures, such as
    "Annotation".  One was used (<code>org.apache.uima.jcas.tcas.Annotation</code>) if the JCas was enabled; 
    the other (<code>org.apache.uima.cas.impl.AnnotationImpl</code>)otherwise.  In version 3, there's only one implementation;
    the other (AnnotationImpl) is converted to an interface.  Annotation now "implements AnnotationImpl.</para>
  </section>
 
  <section id="uv3.new_extended_apis.class">
    <title>Use of JCas Class to specify a UIMA type</title>
    
    <para>Several APIs require a UIMA type to be specified.  For instance, the API to remove all Feature Structures
    of a particular type requires the type to be specified.  Instead of a UIMA Type object, if there is a JCas
    cover class for that type, you can pass that as well, as (for example) <code>Annotation.class</code>.
    </para>
  </section>
    
  <section id="uv3.new_extended_apis.jcasgen">
    <title>JCasGen changes</title>
    
    <para>JCasgen is modified to generate the v3 style of JCas cover classes. 
      It no longer generates the the xxx_Type.java classes, as these are 
      not used by UIMA Version 3.</para>
      
    <section id="uv3.new_extended_apis.jcas_static_fields">
    <title>JCas additional static fields</title>
    
    <para>Static final string fields are declared for each JCas cover class
      and for each feature that is part of that UIMA type.  The fields look like
      this example, taken from the Sofa class:
      <programlisting>public final static String _TypeName = "org.apache.uima.jcas.cas.Sofa";
public final static String _FeatName_sofaNum    = "sofaNum";
public final static String _FeatName_sofaID     = "sofaID";
public final static String _FeatName_mimeType   = "mimeType";
public final static String _FeatName_sofaArray  = "sofaArray";
public final static String _FeatName_sofaString = "sofaString";
public final static String _FeatName_sofaURI    = "sofaURI";</programlisting>
       Each string has a generated name corresponding to the name of the type or the feature, and
       a string value constant which of the type or feature name. These can be useful in
       Java Annotations.
    </para>
  </section>
          
  </section>
  
  <section id="uv3.new_extended_apis.generics">
    <title>Generics added</title>
    
    <para>Version 3 adds generic typing to several structures, and makes use of this to enable users to
      unclutter their code by taking advantage of Java's type inferencing, in many cases.
    </para>
    
    <para>Generic types are added to:
      <itemizedlist>
        <listitem>
          <para><emphasis>FSIndex</emphasis> &lt;T extends FeatureStructure&gt; the type the index is over.</para>
        </listitem>
        <listitem>
          <para><emphasis>FSArray</emphasis> &lt;T extends FeatureStructure&gt; the type the FSArray holds.</para>
        </listitem>
        <listitem>
          <para><emphasis>FSList</emphasis> &lt;T extends TOP&gt; the type the FSList holds.</para>
        </listitem>
        <listitem>
          <para><emphasis>SelectFSs</emphasis> &lt;T extends FeatureStructure&gt; the type the select is producing.</para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  
  <section id="uv3.new_extended_apis.other">
    <title>Other changes</title>
    
    <para>The convenience methods in the JCas have been duplicated in the CAS, e.g. <code>getAllIndexFS</code>.</para>
    
    <para>New methods <code>getIndexedFSs(myUimaType)</code> and <code>getIndexedFSs(MyJCas.class)</code> return 
    unmodifiable, unordered Collections of all indexed Feature Structures of the specified type and its subtypes in 
    this CAS's view.  This collection can be
    used in a Java extended-for loop construction. <code>getIndexedFSs()</code> is the same but is for all Feature Structures,
    regardless of type.  These are methods on the CAS, JCas, FSIndexRepository
    interfaces, and return the Feature Structures of the specified type (including subtypes).</para>
    
    <para>The TypeSystemMgr Interface has a variation of the <code>commit</code> method, which has a parameter 
      that specifies the class loader to be used when loading JCas class.  This should be used whenever there are
      user-specified JCas classes associated with the type system.  If not specified, it defaults to the class
      loader used to load the UIMA framework.
    </para>
        
    <para>The utility class <code>org.apache.uima.util.FileUtils</code> has a new method
      <code>writeToFile(path, string)</code>, which efficiently writes a string using UTF-8 encoding to 
      <code>path</code>.
    </para>
    
    <para>The StringArray class has a new <code>contains(a_string)</code> method.</para>
    
    <para>The CAS <code>protectIndexes</code> method returns an instance of AutoClosableNoException which is 
      a subtype where the close method doesn't throw an exception.  This allows writing the try-with-resources
      form without a catch block for Exception.</para>
    
    <para>
      Sometimes Annotators may log excessively, causing problems in production settings.
      Although this could be controlled using logging configuration, sometimes when
      UIMA is embedded into other applications, you may not have easy access to modify those.
     </para><para>
      For this case, the produceAnalysisEngine's "additionalParameters" map supports a new key,  
      AnalysisEngine.PARAM_THROTTLE_EXCESSIVE_ANNOTATOR_LOGGING.  
      This key specifies that throttling should be applied to messages
      produced by annotators using loggers obtained by Annotator code using the getLogger() API.
    </para><para>
      The value specified must be an Integer, and is the number of messages allowed before
      logging is suppressed.  This number is applied to each logging level, separately.
      To suppress all logging, use 0.  
    </para>
    
    <para>The Type interface has new methods <code>subsumes(another_type), isStringOrStringSubtype()</code>, 
        and <code>isStringSubtype().</code></para>

    <para>The FlowController_ImplBase supports a getLogger() API, which is shorthand for getContext().getLogger().</para>
    
    <para>Many error messages were changed or added, causing changes to localization classes.
      For coding efficiency, some of the structure of the internal error reporting calls was changed
      to make use of Java's variable number of arguments syntax.</para>
      
    <para>The UIMA Logger implementation has been extended with both the SLF4J logger APIs and the 
       Log4j APIs which support Java 8's <code>Supplier</code> Functional Interfaces.</para>
 
    <para>The TypeSystem and Type object implementations implement <code>Iterable</code> and will iterate over
      all the defined types, or, for a type, all the defined Features for that type.</para>        
  </section> 
   
</chapter>