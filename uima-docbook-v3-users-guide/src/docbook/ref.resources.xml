<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"[
<!ENTITY imgroot "images/references/ref.resources/">
<!ENTITY tp "ugr.ref.resources.">
<!ENTITY % uimaents SYSTEM "../../target/docbook-shared/entities.ent" >  
%uimaents;
]>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<chapter id="ugr.ref.resources">
  <title>UIMA Resources</title>
  <titleabbrev>UIMA Resources</titleabbrev>

  <section id="ugr.ref.resources.overview">
    <title>What is a UIMA Resource?</title>
    <para>UIMA uses the term <code>Resource</code> to describe all UIMA components
    that can be acquired by an application or by other resources.  These are typically
    written by users, and are not part of the UIMA framework itself.</para>
    
    <figure id="ref.resource.fig.kinds">
      <title>Resource Kinds</title>
      <mediaobject>
        <imageobject>
          <imagedata width="3in" format="PNG" fileref="&imgroot;res_resource_kinds.png"/>
        </imageobject>
        <textobject><phrase>Resource Kinds</phrase>
        </textobject>
      </mediaobject>
    </figure>
    
    <para>Resource kinds include:
      <variablelist>
    
        <varlistentry>
          <term><emphasis role="strong">Annotator</emphasis></term>
          <listitem><para>a user written component, receives a CAS, does some processing, and returns the possibly
          updated CAS.  Variants include CollectionReaders, CAS Consumers, CAS Multipliers.</para></listitem>
        </varlistentry>
    
        <varlistentry>
          <term><emphasis role="strong">Flow Controller</emphasis></term>
          <listitem><para>a user written component controlling the flow of CASes within an aggregate.</para></listitem>
        </varlistentry>
        
        <varlistentry>
          <term><emphasis role="strong">External Resource</emphasis></term>
          <listitem><para>a user written component. Variants include:
            <itemizedlist spacing="compact">
              <listitem><para>Data - includes special lifecycle call to load data</para></listitem>
              <listitem><para>Parameterized - allows multiple instantiations with simple string parameter variants;
                example: a dictionary, that has variants in content for different languages</para></listitem>
              <listitem><para>Configurable - supports configuration from the XML specifier</para></listitem>
            </itemizedlist>
          </para></listitem>
        </varlistentry>
        
        <varlistentry>
          <term><emphasis role="strong">CAS Pools</emphasis></term>
          <listitem><para>This is a UIMA framework resource, providing a pooling mechanism to efficiently
            share CAS instances with identicial type systems with multiple UIMA pipelines.</para></listitem>
        </varlistentry>
    
      </variablelist>
    </para>

   <section id="ugr.ref.resources.framework-vs-resources">
      <title>Resources-framework versus Resources</title>
      <para>It is easy to confuse UIMA framework classes and methods designed to support resources, with the 
        resources themselves.  There are many different specializations of resources, and corresponding
        parts of the UIMA framework that support these.</para>
        
      <para>Here's a small part of the UIMA Frame support classes, in green, showing some of the User resources that
        have been (in this example) instantiated, in yellow.
        The yellow components have their own superclass hierarchy, indicated by the upwards pointing arrow,
        independent from the resource framework implementation.
        Each Resource has its own set of framework class instances, starting with a <code>Resource_Impl</code> instance, 
        and also its own User code instance.  For clarity, the multiple instances are omitted in the middle of the 
        diagram.</para>
        
    <figure id="ref.resource.fig.framework-vs-resources">
      <title>Resource Kinds</title>
      <mediaobject>
        <imageobject>
          <imagedata width="5.5in" format="PNG" fileref="&imgroot;res_resource_user.png"/>
        </imageobject>
        <textobject><phrase>Framework versus User components</phrase>
        </textobject>
      </mediaobject>
    </figure>
        
   </section>

  </section>

  <section id="ugr.ref.resources.resource-specifiers">
    <title>Resource Specifiers</title>
    
    <para>Resources are instantiated from specifications contained in XML Resource Specifiers.
      These are described in the reference chapter on component descriptors.  A common 
      <code>initialize</code> method that is part of UIMA framework classes that supports Resources, 
      takes the <code>ResourceSpecifier</code> (the internal Java form of the XML resource specifier),
      plus a key-value map of arbitrary additional parameters, and is responsible for configuring
      the instance of the UIMA framework support class so that it can respond to subsequent method calls
      to get an instance of the resource.
      </para>
      
      <para>Note that this <code>initialize</code> method is different from the <code>initialze(uimaContext)</code> method
         that is part of the API for AnalysisEngines.</para>
  </section>
  
  <section id="ugr.ref.resources.sharing-across-pipelines">
    <title>Sharing Resources, even across pipelines</title>
    <titleabbrev>Sharing Resources</titleabbrev>
    <para>UIMA applications run one or more UIMA Pipelines.  Each pipeline has a top-level Analysis Engine, which
    may be an aggregation of many other Analysis Engine components.  The UIMA framework instantiates Annotator 
    resources as specified to configure the pipelines.</para>
    
    <para>Sometimes, many identical pipelines are created (for example,
    in order to exploit multi-core hardware by processing multiple CASes in parallel). In this case, the framework
    would produce multiple instances of those Annotation resources; these are implemented as multiple instances
    of the same Java class.</para>
    
    <para>Multiple resources in addition to the Annotators are set up and kept in a single instance of
    the ResourceManager; this instance serves to allow sharing of 3 types of things across one or more pipelines.
    These are: 
    <itemizedlist>
      <listitem>
        <para>The UIMA Extension ClassLoader (if specified) - used to find the resources</para>
        <para>The <code>External Resources</code></para>
        <para>The CAS Pool</para>
      </listitem>
    </itemizedlist> </para>
    
    <para>In typical use, no existing ResourceManager used when creating a pipeline; this results in a new
    ResourceManager being created and used for that pipeline.  However, in many cases, it may be advantageous to
    share the same Resources across multiple pipelines; this is easily doable by passing a common instance of the
    ResourceManager to the pipeline creation methods (using the additional parameters).</para>
    
    <para>For PEAR wrapper usage, a special extra version of an existing ResourceManager is created, called the
    <code>ResourceManagerPearWrapper</code>, which keeps all the same resources, except that it has a separate
    value for the UIMA Extension Classloader.  This is used to support the classpath isolation feature of PEARs.</para>
  </section>
  
  <section id="ugr.ref.resources.lifecycles">
    <title>Resource lifecycles</title>
    <para>The lifecycle for resources includes several events.</para>

    <figure id="ref.resource.fig.lifecycles">
      <title>Resource Lifecycles</title>
      <mediaobject>
        <imageobject>
          <imagedata width="4in" format="PNG" fileref="&imgroot;res_resource_lifecycles.png"/>
        </imageobject>
        <textobject><phrase>Resource lifecycles</phrase>
        </textobject>
      </mediaobject>
    </figure>

    <para>Annotators are <code>instantiated</code> by the various flavors of <code>produceResource</code>, 
    and their <code>initialize(UimaContext)</code>  method
    is called.  
    While the pipe line is running, each new CAS that arrives is passed in via the <code>process</code>
    method. The UIMA Framework doesn't generate a <code>destroy</code> call on its own, because only the 
    application code making use of the UIMA Framework knows when a pipeline is finished and can be destroyed.</para>
    
    <para>External Resources are instantiated as a side effect of running <code>produceResource</code>
    to produce a pipeline. Instances of DataResource have their <code>load</code> method called during this time.
    Instances of ConfigurableDataResource defer their call to <code>load</code> until a call is made to get the
    resource - this call supplies a parameter, such as a language code, used to pick one of several inputs to 
    load.</para>
    
    <para>CasPools are instantiated lazily, when a Cas is requested from the pipeline, or when a pool of a given
    size needs to be set up for some pipeline configurations.  For instance, the MultiprocessingAnalysisEngine 
    configuration sets up a pool with the size equal to the number of parallel pipelines being configured.</para>
    
    <para>(New as of UIMA 2.10.0) For both External Resources and the Cas Pool, <code>destroy</code> is not
    generated internally by the UIMA framework, because it doesn't know when the application (which might be
    sharing the ResourceManager's resources among multiple pipelines) is finished.  The application may 
    call <code>destroy</code> on the ResourceManager instance, which will then forward this to the External Resources,
    and the CAS Pool.</para>
    
  </section>   

  <section id="ugr.ref.resources.ResourceManager-and-PEARs">
    <title>ResourceManager and PEARs</title>
    <para></para>

    <section id="ugr.ref.resources.lifecycle-PEARs">
      <title>Lifecycle for PEARs</title>
      <para></para>
    </section>
  </section>
  
  <section id="ugr.ref.resources.external-resources">
    <title></title>
    <para></para>

    <section id="ugr.ref.resources.external-resource-multiple-parameterized-instances">
      <title>Multiple Parameterized Instances of a particular resource</title>
      <para></para>
    </section>
    
  </section>
  
  <section id="ugr.ref.resources.configuration">
    <title>Resource Configuration</title>
    <para></para>

    <section id="ugr.ref.resources.external-resource-configuration">
      <title>Configuration of External Resources</title>
      <para></para>
    </section>
  </section>

  <section id="ugr.ref.resources.cas-pools">
    <title>CAS Pools</title>
    <para></para>
  </section>
  
</chapter>