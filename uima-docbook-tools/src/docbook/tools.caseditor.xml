<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"[
<!ENTITY imgroot "images/tools/tools.caseditor/" >
<!ENTITY % uimaents SYSTEM "../../target/docbook-shared/entities.ent" >  
%uimaents;
]>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<chapter id="ugr.tools.ce">

	<title>Cas Editor User&apos;s Guide</title>
	<titleabbrev>Cas Editor User&apos;s Guide</titleabbrev>

	<section id="sandbox.caseditor.Introduction">
		<title>Introduction</title>

		<para>
			The CAS Editor is an eclipse based annotation tool which supports manual and automatic
			annotation (via running UIMA annotators) of CASes stored in files.
			Currently only text-based CAS are supported. 
		    The CAS Editor can visualize and edit all feature structures. 
		    Feature Structures which are annotations can additionally be viewed and edited
			directly on text.
		</para>
		
		<!-- Note: In the HTML version the screen shot is to small and in the
		PDF version its almost to big, how can that be fixed ?! -->
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata width="5.7in" format="PNG"
						fileref="&imgroot;CasEditor.png" />
				</imageobject>
			</mediaobject>
		</screenshot>
	</section>

	<section id="sandbox.caseditor.Launching">
		<title>Launching the Cas Editor</title>
		<para>
			To open a CAS in the Cas Editor it needs a compatible type system
			and styling information which specify how to display the types.
			The styling information is created automatically by the Cas Editor,
			the type system file must be provided by the user.
			A CAS in the xmi or xcas format can simply be opened by clicking
			on it, like a text file is opened with the eclipse text editor.
			The Cas Editor expects a type system file at the root of the project
			named TypeSystem.xml. If the type system file does not exist in this
			location the user has the option to point the Cas Editor to a
			type system file.
		</para>

		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata scale="100" format="PNG"
						fileref="&imgroot;ProvideTypeSystem.png" />
				</imageobject>
				<textobject>
					<phrase>No type system available for the opened CAS.</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
		<para>
			After the Cas Editor is opened switch to the Cas Editor
			Perspective to see all the Cas Editor related views.
		</para>
		<para>
			Depending on the requirements the user should create
			a Cas Editor project. The Cas Editor project is intended for
			users which are building a corpus or need to annotate/view a
			significant number of documents.
			See the Cas Editor project section below for further details.
		</para>
	</section>

	<section id="sandbox.caseditor.Projects">
		<title>Cas Editor Project</title>

		<para>
			The CAS Editor can operate with special Eclipse projects created using 
			the menu pick for new Projects -> Other -> Cas Editor -> Cas Editor Project.
			The CAS Editor operates on artifacts in one or more of these kinds of projects. It is
			recommended to use Cas Editor Project when building a corpus or reviewing/annotating a
			huge amount of documents.
		</para>

		<section id="ugr.tools.cas_editor.projects.structure">
			<title>Cas Editor Project structure</title>

			<para>A Cas Editor project includes these elements:</para>

			<para>
				<itemizedlist>

					<listitem>
						<para>
							<emphasis>Type system</emphasis>
							The type system must be present for opening
							a CAS file or running a CAS processor.
						</para>
					</listitem>

					<listitem>
						<para>
							<emphasis>Corpus folder</emphasis>
							A corpus folder is a collection of CAS files
							in the project. A project can have multiple
							corpus folders.
						</para>
					</listitem>

					<listitem>
						<para>
							<emphasis>CAS file</emphasis>
							The CAS itself.  It must be located in a
							corpus folder and must end with ".xmi" or".xcas" to
							be recognized as a CAS file.
						</para>
					</listitem>

					<listitem>
						<para>
							<emphasis>CAS Processor folder</emphasis>
							A processor folder contains Analysis
							Engine and CAS Consumer Descriptors. The
							CAS processor folder is also put on the data path
							for the processors when they are run.  A project can have
							multiple processor folders.
						</para>
					</listitem>

					<listitem>
						<para>
							<emphasis>
								Analysis Engine Descriptor
							</emphasis>
							Configuration for an Analysis Engine which
							can be used to annotate CAS files in a
							corpus folder. To be recognized as Analysis
							Engine Descriptor the file must end with
							".xml", contain an Analysis Engine Descriptor and
							must be placed in a processor folder.
						</para>
					</listitem>

					<listitem>
						<para>
							<emphasis>Consumer Descriptor</emphasis>
							Configuration for a Consumer which can be
							fed with the CAS files in a corpus. To be
							recognized as Consumer Descriptor the file
							must end with ".xml", contain a Cas Consumer Descriptor
							and must be placed in a processor folder.
						</para>
					</listitem>
				</itemizedlist>
			</para>

			<para>
				These elements are shown differently than normal files
				and folders in the corpus explorer view. In addition to
				the listed elements a project can also contain files and
				folders e.g. for documentation. If one of these special
				elements contains an error, a marker which describes the
				problem is added to the file and shown in the editor (the file itself is not marked).
			</para>

			<para>
				The corpus explorer with a project looks like this:
			</para>
			
			<para>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata scale="100" format="PNG"
								fileref="&imgroot;CorpusExplorer.png" />
						</imageobject>
						<textobject>
							<phrase>
								Screenshot of corpus explorer
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</para>
		</section>

		<section id="ugr.tools.cas_editor.add_typesystem">
			<title>Add a type system</title>
			<para>
				Its strongly recommended to first add a valid type system
				to the project; other functions are only available if the
				type system is present. Use copy and paste to import an
				existing type system (no drag n' drop support).
				Editing of the type system is supported, but afterwards all
				editors should be reopened to recognize the type system change.
			</para>

			<para>
				After the type system file is added, you need to make the CAS Editor
				aware of its existence. To do this open the Properties
				dialog for the project and then select the type system as
				shown here:
			</para>

			<screenshot>
				<mediaobject>
					<imageobject>
						<imagedata scale="70" format="PNG"
							fileref="&imgroot;Properties.png" />
					</imageobject>
				</mediaobject>
			</screenshot>
			
			<para>
				Now the new type system element can be seen in the
				project tree of the corpus explorer.
			</para>
		</section>

		<section id="ugr.tools.cas_editor.add_corpus">
			<title>Add corpus folder</title>
			<para>
				To add a corpus folder first create a new folder. Then
				open the Properties dialog and add the folder to the
				list of corpus folders. It than appears as a corpus folder
				in the corpus explorer.
			</para>
			
			<para>
				The corpus explorer automatically hides all non-CAS
				files in the corpus folder. The CAS files are organized
				in a flat hierarchy; sub folders which contain CAS files
				are not shown.
			</para>
		</section>
	</section>

	<section id="sandbox.caseditor.annotation_editor">

		<title>Annotation editor</title>
		<para>
			The annotation editor shows the text with annotations and
			provides different views to show aspects of the CAS.
			
		</para>

		<section id="ugr.tools.cas_editor.annotation_editor.editor">
			<title>Editor</title>
			<para>
			    After the editor is open it shows the default sofa of the CAS, displaying another sofa is right now not possible.
				The editor has an associated, changeable CAS Type. This type is called the editor "mode".
        		By default the editor only shows annotation of this type. Actions and views are
				sensitive to this mode.
				
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata scale="100" format="PNG"
								fileref="&imgroot;EditorOneType.png" />
						</imageobject>
					</mediaobject>
				</screenshot>
				
				To change the mode for the editor, use the "Mode" menu in the editor context menu.
				To open the context menu right click somewhere on the text.
				
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata scale="100" format="PNG"
								fileref="&imgroot;ModeMenu.png" />
						</imageobject>
					</mediaobject>
				</screenshot>
				        	
				The current mode is displayed in the status line at the bottom and in the Style View.
			</para>
			
      		<para>
				Its possible to work with more than one annotation type at a time, the mode just selects the default annotation type
				which can be marked with the fewest keystrokes. To show annotations of other types, use the "Show" menu in
				the context menu.
					
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata scale="100" format="PNG"
								fileref="&imgroot;ShowAnnotationsMenu.png" />
						</imageobject>
					</mediaobject>
				</screenshot>
				
				Or selected the annotation types to be shown in the Style View.
				
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata scale="100" format="PNG"
								fileref="&imgroot;StyleView2.png" />
						</imageobject>
					</mediaobject>
				</screenshot>
				The editor shows now also the additional selected types.
				
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata width="5.7in" format="PNG"
								fileref="&imgroot;EditorAllTypes.png" />
						</imageobject>
					</mediaobject>
				</screenshot>				
				The annotation renderer and rendering layer can be changed in the Properties dialog. After the
				change all editors which share the same type system will be updated.
			</para>
			<para>
				The editor automatically selects annotations of the editor mode type that are near the
				cursor. This selection is then synchronized or displayed in other views.
			</para>
			<para>
				To create an annotation manually using the editor, mark a piece of text and then
				press the enter key. This creates an annotation of the 
        		type of the editor mode, having bounds corresponding to the selection.
        		Or use the "Quick Annotate" action from the context menu.
			</para>
			<para>
				It is also possible to choose the annotation type; press
				shift + enter (smart insert) or click on "Annotate" in the context menu for this.
				Then a dialog asks for the annotation type to create, either select the desired type or use
				the associated key shortcut. In the screen shot below a press on "p"
				will create a Person annotation for "Obama".
			</para>
			
			<screenshot>
				<mediaobject>
					<imageobject>
						<imagedata scale="100" format="PNG"
							fileref="&imgroot;ShiftEnter.png" />
					</imageobject>
				</mediaobject>
			</screenshot>
			
			<para>
				To delete an annotation select it and press the delete
				key. Only annotations of the editor mode can be deleted with this method.
				To delete non editor mode annotations use the Outline View.
			</para>
			
			<para>
			For annotation projects its recommended to increase the font size in the editor. 
			This can be done in the eclipse preference dialog, go to General -> Colors and Fonts and
			then on the right side Basic -> Text Font. Change it from 11 to 14 for example.</para>
		</section>

		<section id="sandbox.caseditor.annotation_editor.styling">
			<title>Configure annotation styling</title>
			<para>
				The Cas Editor can visualize the annotations in multiple
				highlighting colors and with different annotation drawing styles.
				The annotation styling is defined per type system. When its changed,
				the appearance changes in all opened editors sharing a type system.
			</para>
		
			<para>
				The styling is initialized with a unique color for every
				annotation type and every annotation is drawn with
				Squiggles annotation style. Its recommended to adjust
				the annotation styles and coloring depending on the project
				needs.
			</para>
		
			<screenshot>
				<mediaobject>
					<imageobject>
						<imagedata scale="100" format="PNG"
						fileref="&imgroot;StyleView.png" />
				</imageobject>
				</mediaobject>
			</screenshot>
			
			<para>
				The Cas Editor offers a property page to edit the
				styling. To open this property page click on the "Properties"
				button in the Styles view.
			</para>
			
			<para>
				The property page can be seen below. By clicking on one of the
				annotation types the color, drawing style and drawing layer can be edited on the right
				side.
			</para>
			
			<screenshot>
				<mediaobject>
					<imageobject>
						<imagedata scale="75" format="PNG"
						fileref="&imgroot;StyleProperties.png" />
				</imageobject>
				</mediaobject>
			</screenshot>
			
			<para>
				The annotations can be visualized with one the following 
				annotation stlyes:
			
			
				<table frame='all'><title>Style Table</title>
					<tgroup cols='3' align='left' colsep='1' rowsep='1'>
					<thead>
						<row>
						  <entry>Style</entry>
						  <entry>Sample</entry>
						  <entry>Description</entry>
						</row>
					</thead>
					<tbody>
					<row>
						<entry>BACKGROUND</entry>
						<entry>							
							<screenshot>
								<mediaobject>
									<imageobject>
										<imagedata align="left" scale="100" format="PNG"
											fileref="&imgroot;Style-Background.png" />
										</imageobject>
								</mediaobject>
							</screenshot>
						</entry>
						<entry>
							<para>The background is drawn in the annotation color.</para>
						</entry>
					</row>
					
					<row>
						<entry>TEXT_COLOR</entry>
						<entry>							
							<screenshot>
								<mediaobject>
									<imageobject>
										<imagedata align="left" scale="100" format="PNG"
											fileref="&imgroot;Style-TextColor.png" />
										</imageobject>
								</mediaobject>
							</screenshot>
						</entry>
						<entry>
							<para>The text is drawn in the annotation color.</para>
						</entry>
					</row>

					<row>
						<entry>TOKEN</entry>
						<entry>							
							<screenshot>
								<mediaobject>
									<imageobject>
										<imagedata align="left" scale="100" format="PNG"
											fileref="&imgroot;Style-Token.png" />
										</imageobject>
								</mediaobject>
							</screenshot>
						</entry>
						<entry>
							<para>
								The token type assumes that token annotation are always separated
								by a whitespace. Only if they are not separated by a whitespace
								a vertical line is drawn to display the two token annotations.
								The image on the left actually contains three annotations, one for "Mr", "."
								and "Obama".
							</para>
						</entry>
					</row>
					
					<row>
						<entry>SQUIGGLES</entry>
						<entry>							
							<screenshot>
								<mediaobject>
									<imageobject>
										<imagedata align="left" scale="100" format="PNG"
											fileref="&imgroot;Style-Squiggles.png" />
										</imageobject>
								</mediaobject>
							</screenshot>
						</entry>
						<entry>
							<para>Squiggles are drawen under the annotation in the annotation color.</para>
						</entry>
					</row>
					
					<row>
						<entry>BOX</entry>
						<entry>							
							<screenshot>
								<mediaobject>
									<imageobject>
										<imagedata align="left" scale="100" format="PNG"
											fileref="&imgroot;Style-Box.png" />
										</imageobject>
								</mediaobject>
							</screenshot>
						</entry>
						<entry>
							<para>A box in the annotation color is drawn around
							the annotation.</para>
						</entry>
					</row>
					
					<row>
						<entry>UNDERLINE</entry>
						<entry>							
							<screenshot>
								<mediaobject>
									<imageobject>
										<imagedata align="left" scale="100" format="PNG"
											fileref="&imgroot;Style-Underline.png" />
										</imageobject>
								</mediaobject>
							</screenshot>
						</entry>
						<entry>
							<para>A line in the annotation color is drawen below
							the annotation.</para>
						</entry>
					</row>

					<row>
						<entry>BRACKET</entry>
						<entry>							
							<screenshot>
								<mediaobject>
									<imageobject>
										<imagedata align="left" scale="100" format="PNG"
											fileref="&imgroot;Style-Bracket.png" />
										</imageobject>
								</mediaobject>
							</screenshot>
						</entry>
						<entry>
							<para>An opening bracket is drawn around the first
							character of the annotation and a closing bracket
							is drawn around the last character of the annotation.</para>
						</entry>
					</row>
					
					</tbody>
					</tgroup>
				</table>
			</para>
			
			<para>
				The Cas Editor can draw the annotations in different
				layers. If the spans of two annotations overlap the annotation
				which is in a higher layer is drawn over annotations in a lower 
				layer. Depending on the drawing style it is possible to see
				both annotations. The drawing order is defined by the layer
				number, layer 0 is drawn first, then layer 1 and so on.
				If annotations in the same layer overlap its not defined which
				annotation type is drawn first.
			</para>
		
		<!-- Add image to explain the layers -->
		</section>
		
		<section id="ugr.tools.cas_editor.annotation_editor.outline">
			<title>Outline view</title>
			
			<para>
				The outline view gives an overview of the annoations which are
				shown in the editor, the annotation are grouped by type. There are
				actions to increase or decrease the bounds of the selected annotation. There is
				also an action to merge selected annotations. The outline has second view mode where only
				annotations of the current editor mode are shown. 

			<!-- TODO: Replace image which a newer one -->
			<screenshot>
				<mediaobject>
					<imageobject>
						<imagedata scale="100" format="PNG"
							fileref="&imgroot;Outline.png" />
					</imageobject>
				</mediaobject>
			</screenshot>
			
			The style can be switched in the view menu. Then it only shows the annotations which 
			belong to the current editor mode.
			
			<!-- TODO: Add image which visualizes this -->
			</para>
		</section>

		<section
			id="ugr.tools.cas_editor.annotation_editor.properties_view">
			<title>Edit Views</title>
			<para>
				The Edit Views show details about the currently
				selected annotations or feature structures. It is
				possible to change primitive values in this view.
				Referenced feature structures can be created and deleted
				including arrays. To link a feature structures with
				other feature structures it can be pinned to the edit
				view. This means that it does not change if the
				selection changes.
			</para>
			<screenshot>
				<mediaobject>
					<imageobject>
						<imagedata scale="100" format="PNG"
							fileref="&imgroot;EditView.png" />
					</imageobject>
				</mediaobject>
			</screenshot>
		</section>

		<section id="ugr.tools.cas_editor.annotation_editor.fs_view">
			<title>FeatureStructure View</title>
			<para>
				The FeatureStructure View lists all feature structures of
				a specified type. The type is selected in the type
				combobox.
			</para>
			
			<para>
				Its possible to create and delete feature structures of
				every type.
			</para>

			<screenshot>
				<mediaobject>
					<imageobject>
						<imagedata scale="100" format="PNG"
							fileref="&imgroot;FSView.png" />
					</imageobject>
				</mediaobject>
			</screenshot>
		</section>
	</section>
	<section id="sandbox.caseditor.cas_processor_integration">
		<title>Cas Processor integration</title>
		<para>
			The Cas Processor integration requires a Cas Project. If not
			done already creaet a new folder and register it as Cas Processor
			folder.
		</para>
		
		<para>			
			Before a Cas Processor can be used it must be installed. 
			Take a PEAR and install into a local folder and copy
			the descriptor file over into the Cas Processor folder.
		</para>
		
		<para>
			Now the (Aggregated) Analysis Engine can be run against either a whole corpus or just a
			few CAS files. To do this select a corpus or some CAS files and
			then choose in the context menu the correct Analysis Engine from the PEAR.
			
			<screenshot>
				<mediaobject>
					<imageobject>
						<imagedata width="5.7in" format="PNG"
							fileref="&imgroot;RunAnnotator.png" />
					</imageobject>
				</mediaobject>
			</screenshot>			
		</para>
		
		<para>
			The type system must be compatible with the type system of the Cas Editor
			project otherwise only an error message will be shown when the CASes from the
			corpus folder are opened.
		</para>
		
		<!--  TODO: Is there a sample pear ?! If so give a step by step guide for it!-->
	</section>
</chapter>