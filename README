
      Apache UIMA (Unstructured Information Management Architecture) v2.7.0 SDK
      -------------------------------------------------------------------------

Building from the Source Distribution
-------------------------------------

We use Maven 3.0 or later for building; download this if needed, 
and set the environment variable MAVEN_OPTS to -Xmx800m -XX:MaxPerSize=256m.

Then do the build by going into the .../uimaj directory, and issuing the command
   mvn clean install
   
This builds everything except the ...source-release.zip file. If you want that,
change the command to 

   mvn clean install -Papache-release
   
Look for the result here: 
   target/uimaj-[version]-source-release.zip (if run with -Papache-release)

For more details, please see http://uima.apache.org/building-uima.html   

What's New in 2.7.0
-------------------

  2.7.0 fixes some possibly significant issues, tightens checking, and changes in some subtle
  ways how indices are handled.  Because some of these changes may break backwards
  compatibility, JVM Property definitions are available to disable some of these.
  
  Java 7
  ------
  Java 7 is now required (since UIMA-SDK 2.7.0)
  
  JSON serialization
  ------------------
  JSON serialization support is available for CASs and for UIMA Metadata.
  Several formats for JSON CAS serialization are provided; please see the chapter in the
  UIMA reference documentation for details.
  
  The build from sources will include in the binary distribution tar/zip the 
  Jackson core support JAR  for JSON.  There is
  a new profile flag you can specify to Maven to exclude this: -P!json-support.
  
  No Duplicate entries in indices
  -------------------------------
  Adding the exact same identical Feature Structure to the indices no longer adds duplicate entries;
  this is documented in some detail as Jira issue: https://issues.apache.org/jira/browse/UIMA-3399.
  The old behavior may be restored, if needed for backward compatibility by defining the JVM property
  -Duima.allow_duplicate_add_to_indices; see the UIMA Reference documentation Chapter 10. 
  
  Index Corruption prevention
  ---------------------------
  To prevent potential index corruption, UIMA now recovers 
  (unless disabled by ("-Duima.protect_indices_from_key_updates=false")) 
  from all illegal modifications of features.
  
  These are modifications to features used as index keys, done while the Feature Structure being modified is currently in
  one or more indices (Jira issue UIMA-4135).
  
  Corruption is prevented by doing the needed removes and addbacks to Set and Sorted indices.
  Because the recovery can affect performance, it is recommended that you run with JVM property
  "-Duima.report_fs_update_corrupts_index" in order to see if any user code has this problem, and fix these via 
  redesign, or by wrapping the affected areas with a form of protectIndices() (see the CAS Javadocs).  
  
  New class of UIMA iterators avoids ConcurrentModificationException
  ------------------------------------------------------------------
  A long-standing difficulty with Feature Structure iterators, namely, that adding to / removing from the underlying
  index being iterated over is not allowed while iterating, is addressed with a new class of "snapshot" iterators.
  These take a snapshot of the state of the index when the iterator is created; subsequent modifications to the index
  are then permitted, while the iterator continues to iterate over the snapshot it created; these iterators do not
  throw ConcurrentModificationException.  The implementation of this feature is via a new method on FSIndex, which 
  creates a light-weigh copy of the the FSIndex instance, where getting iterators gets the Snapshot kind.  This approach
  allows using the new index in Java's "extended for" statement.
  
  Bug fixes
  ---------
  There are many bug fixes.  Some highlights: 
    - making the JCasGen Eclipse plugin work with more varieties of specifications for class paths. Jira issues: UIMA-4080/4081
    - moveTo(a_Feature_Structure) or creating a new iterator to start at a feature sometimes went to the wrong place. Jira issues: UIMA-4094 and UIMA-4105
    - deserialization of deltaCAS when modifying existing indexed Feature Structures could corrupt the indices. Jira issue: UIMA-4100
    - default bag indices will now be created if there are only Set indices. Jira issue: UIMA-4111
    
  The complete list of fixes is here: issuesFixed/jira-report.hmtl 
  
Backward Compatibility Accommodations
------------------------------------  
  
  Some updates change UIMA's behavior.  For example, sometimes an error check
  will be enhanced, and something that previously was incorrect, but wasn't checked,
  will now report an exception.
  
  To enable users to gradually fix these, there are some global JVM properties
  for UIMA that can restore earlier behaviors. 
  The UIMA References documentation (see http://uima.apache.org/documentation.html)
  has a table of these in Chapter 10.
      
Supported Platforms
--------------------

Apache UIMA requires Java version 7 or later; it has been tested with Sun/Oracle Java SDK 7, and 8, 
and IBM Java 7 and 8.
Running the Eclipse plugin tooling for UIMA requires you start Eclipse using a Java 7 or later, as well.
The supported platforms are: Windows, Linux, and Mac OS X.  
Other platforms and Java (7+) implementations should work, but have not been significantly tested.

Many of the scripts in the /bin directory invoke Java. They use the value of the environment variable, JAVA_HOME, 
to locate the Java to use; if it is not set, they invoke "java" expecting to find an appropriate Java in your PATH. 


Environment Variables
----------------------

After you have unpacked the Apache UIMA distribution from the package of your choice (e.g. .zip or .gz), 
perform the steps below to set up UIMA so that it will function properly.

    * Set JAVA_HOME to the directory of your JRE installation you would like to use for UIMA.  
    * Set UIMA_HOME to the apache-uima directory of your unpacked Apache UIMA distribution
    * Append UIMA_HOME/bin to your PATH
    
    * Please run the script UIMA_HOME/bin/adjustExamplePaths.bat (or .sh), to update 
      paths in the examples based on the actual UIMA_HOME directory path. 
      This script runs a Java program; 
      you must either have java in your PATH or set the environment variable JAVA_HOME to a 
      suitable JRE.

    Note: The Mac OS X operating system procedures for setting up global environment
    variables are described here: see http://developer.apple.com/qa/qa2001/qa1067.html.
      
      
Verifying Your Installation
----------------------------

To test the installation, run the documentAnalyzer.bat (or .sh) file located in the bin subdirectory. 
This should pop up a "Document Analyzer" window. Set the values displayed in this GUI to as follows:

    * Input Directory: UIMA_HOME/examples/data
    * Output Directory: UIMA_HOME/examples/data/processed
    * Location of Analysis Engine XML Descriptor: UIMA_HOME/examples/descriptors/analysis_engine/PersonTitleAnnotator.xml

Replace UIMA_HOME above with the path of your Apache UIMA installation.

Next, click the "Run" button, which should, after a brief pause, pop up an "Analyzed Results" window. 
Double-click on one of the documents to display the analysis results for that document.


Getting Started
----------------

For an introduction to Apache UIMA and how to use it, please read the documentation 
located in the docs subdirectory.  A good place to start is the overview_and_setup 
book's first chapter, which has a brief guide to the documentation.