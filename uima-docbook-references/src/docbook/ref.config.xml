<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"[
<!ENTITY imgroot "images/references/ref.config/">
<!ENTITY tp "ugr.ref.config.">
<!ENTITY % uimaents SYSTEM "../../target/docbook-shared/entities.ent" >  
%uimaents;
]>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<chapter id="ugr.ref.config">
  <title>UIMA Setup and Configuration</title>
  <titleabbrev>Setup and Configuration</titleabbrev>

  <section id="ugr.ref.config.properties">
    <title>UIMA JVM Configuration Properties</title>
    
    <para> Some updates change UIMA's behavior between released versions.  For example, sometimes an error check
  is enhanced, and this can cause something that previously incorrect but not checked, to now signal an error.
  Often, users will want these kinds of things to be ignored, at least for a while, to give them time to 
  analyze and correct the issues.
    </para> 
    
    <para>
      To enable users to gradually address these issues, there are some global JVM properties
  for UIMA that can restore earlier behaviors, in some cases.  
  These are detailed in the table below.
  For the most part, you don't need to assign any values to these properties,
  just define them.  For example to disable the enhanced check that insures you 
  don't add a subtype of AnnotationBase to the wrong View, you could disable this by
  adding the JVM argument <code>-Duima.disable_enhanced_check_wrong_add_to_index</code>.  
  This would remove the enhanced
  checking for this, added in version 2.7.0 (the previously existing partial checking is
  still there, though).  
    </para>
  </section>   
 
  <section id="ugr.ref.config.protect-index">
    <title>Configuring index protection</title>
    
    <para>A new feature in version 2.7.0 optionally can include checking for invalid feature updates 
    which could corrupt indices.  Because this checking can slightly slow down performance, there are 
    global JVM properties to control it.  The suggested way to operation with these is as follows.
    <itemizedlist>
	    <listitem><para>At the beginning, run with automatic protection enabled (the default), but
	    turn on explicit reporting (<code>uima.report_fs_update_corrupts_index</code>))</para></listitem>
	    <listitem><para>For all reported instances, examine your code to see if you can restructure to
	    do the updates before adding the FS to the indices.  Where you cannot, surround the code doing 
	    these updates with a try / finally or block protectIndices() form (see documentation in the CAS Javadocs).
	    </para></listitem>
	    <listitem><para>After no further reports, for maximum performance, you can leave in the protections 
	    you may have installed in the above step, and then disable the reporting and runtime checking, by setting 
	    <code>uima.protect_indices_from_key_updates</code> to false, and removing any 
	    <code>uima.report_fs_update_corrupts_index</code> JVM property.</para></listitem>
    </itemizedlist>
    One additional JVM property, <code>uima.throw_exception_when_fs_update_corrupts_index</code>, will throw
    a UIMARuntimeException if an update outside of a protectIndices block occurs that could corrupt the indices,
    rather than "recovering" this.  This is useful for automated builds, where you may want a strong signal if
    this kind of mistake gets into the build.
    </para>
  </section>
  
  <section id="ugr.ref.config.property-table">
    <title>Properties Table</title>
      
    <informaltable frame="all" rowsep="1" colsep="1">
     <tgroup cols="3">
       <colspec colnum="1" colname="Title" colwidth="1*"/>
       <colspec colnum="2" colname="Description" colwidth="3*"/>
       <colspec colnum="3" colname="Version"  colwidth= "0.5*"/>
        
       <tbody>
         <row>
           <entry><emphasis role="bold">Title</emphasis></entry>
           <entry><emphasis role="bold">Property Name &amp; Description</emphasis></entry>
           <entry><emphasis role="bold">Since Version</emphasis></entry>
         </row>
         <row>
           <entry><para>adding Annotation to wrong View</para></entry>
           
           <entry><para><code>uima.disable_enhanced_check_wrong_add_to_index</code></para>
           
                  <para>See <ulink url="https://issues.apache.org/jira/browse/UIMA-4099"/>.
                        Feature Structures which are subtypes of AnnotationBase             
                        may only be added to the View corresponding to their
                        Sofa reference.  From version 2.7.0, there is additional 
                        checking of this which can be disabled if needed 
                        for backward compatibility.</para></entry>
           <entry><para>2.7.0</para></entry>
         </row>
         
         <row>
           <entry><para>Report Illegal Index-key Feature Updates</para></entry>
           
           <entry><para><code>uima.report_fs_update_corrupts_index</code> (default is not to report)</para>
                      
                  <para>See <ulink url="https://issues.apache.org/jira/browse/UIMA-4059">UIMA-4059</ulink>.
                        Updating Features which are used in Set and Sorted
                        indices as "keys" may corrupt the indices, if the Feature Structure (FS)
                        has been added to the indices.  To update these, you must first
                        completely remove the FS from the indexes in all views, then do the updates, and then
                        add it back.  UIMA now checks for this (unless specifically disabled, see below),
                        and if this property is set, will log WARN messages for each occurrence unless
                        the user does explicit protectIndices (see CAS Javadocs), if this
                        property is defined.</para>
                   
                   <para>Specifying this property also forces <code>uima.protect_indices_from_key_updates</code> to true
                         even if it was set to false (see below).</para>
                         
                   <para>Users would run with this property defined, and then for high performance, 
                        would use the report to manually change their code to avoid the problem or 
                        to wrap the updates with a protectIndices kind of protection (see the
                        reference manual, in the CAS or JCas chapters, for examples of user code doing this, 
                        and then run with the protection turned off (see below).
                        
                        </para></entry>
                        
           <entry><para>2.7.0</para></entry>
         </row>

         <row>
           <entry><para>Throw exception on illegal Index-key Feature Updates</para></entry>
           
           <entry><para><code>uima.exception_when_fs_update_corrupts_index</code>(default is automatically handle)</para>
                      
                  <para>See <ulink url="https://issues.apache.org/jira/browse/UIMA-4150">UIMA-4150</ulink>.
                        Throws a UIMARuntimeException if an Indexed FS feature used as a key in one or more 
                        indices is updated, outside of an explicit protectIndices block..  \
                        This is intended for use in automated build and test environments,
                        to provide a strong signal if this kind of mistake gets into the build.</para>
                   
                   <para>Specifying this property also forces <code>uima.report_fs_update_corrupts_index</code>
                         to true even if it was set to false.</para>
                         
                   </entry>
                        
           <entry><para>2.7.0</para></entry>
         </row>
         
         <row>
           <entry><para>Protect Indices from Key Updates</para></entry>
           
           <entry><para><code>uima.protect_indices_from_key_updates</code> (default is true)</para>
                      
                  <para>See <ulink url="https://issues.apache.org/jira/browse/UIMA-4135">UIMA-4135</ulink>.
                        After you have fixed all reported issues identified with the above report,
                        set this to false to omit this check - which will potentially slightly speed up 
                        runs.</para>
           </entry>
                        
           <entry><para>2.7.0</para></entry>
         </row>

         <row>
           <entry><para>Disallow duplicate addToIndexes for identical Feature Structures</para></entry>
           
           <entry><para><code>uima.allow_duplicate_add_to_indices</code></para>
           
                  <para>See <ulink url="https://issues.apache.org/jira/browse/UIMA-4059"/>
                        and <ulink url="https://issues.apache.org/jira/browse/UIMA-3399"/>.
                        As of version 2.7.0, adding a particular Feature Structure
                        to the indices more than once is ignored.  The old behavior
                        may be restored by this property.</para></entry>
           <entry><para>2.7.0</para></entry>
         </row>

       </tbody>
     </tgroup>
   </informaltable>
    
  </section>
  
</chapter>